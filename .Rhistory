dim(weights_num)
colSums(weights_num)
colSums(weights_num)
object.size(weights_num)
object.size(weights_num) / 1000
object.size(weights_num) / 1000 / 1000
object.size(weights_num) / 1000 / 1000 / 1000
gc()
weights <- colSums(weights_num)
ewights
weights
dim(weights_num)
weights_denom <- colSums(weights_num)
weights <- apply(weights_num, 2, function(x) x / weights_denom)
warnings()
weights_num[, 1]
weights_num[, 1] |> length()
weights_num |> dim()
weights_num[1, ] |> length()
weights_num[1, ] / weights_denom
weights <- apply(weights_num, 1, function(x) x / weights_denom)
weights
dim(weights)
Y_list[[1]]$X
Y_list[[1]]$X |> dim()
dim(weights)
weights <- t(apply(weights_num, 1, function(x) x / weights_denom))
dim(weihgts)
dim(weights)
Y_list[[1]]$X |> c()
Y_list[[1]]$X |> c() |> length()
?crossprod
Y_smooth <- crossprod(c(Y_list[[1]]$X), weights)
Y_smooth
Y_smooth |> dim()
Y_smooth <- crossprod(c(Y_list[[1]]$X), weights) |>
matrix(nrow = length(xout), ncol = length(xout))
image(Y_smooth)
image(Y_list[[1]]$X)
Y_smooth <- purrr::map(Y_list,
~matrix(crossprod(c(.x), weights)
nrow = xout,
Y_smooth <- purrr::map(Y_list,
~matrix(crossprod(c(.x), weights),
nrow = xout,
ncol = xout)
)
Y_smooth <- purrr::map(Y_list,
~matrix(crossprod(c(.x$X), weights),
nrow = xout,
ncol = xout)
)
warnings()
Y_smooth <- purrr::map(Y_list,
~matrix(crossprod(c(.x$X), weights),
nrow = length(xout),
ncol = length(xout)
)
)
?vapply
Y_smooth
tobs$t1
View(tobs)
View(tout)
tobs[1, ]
tobs[1, ]
tout[1, ]
tout
tout$t1[1, ]
tout$t1 |> dim()
tout$t1
tout[1, ]
tobs[1, ] - tout[1, ]
tobs[1, ] - tout
tobs[1, ] - tout
tobs[1, ]
c(tobs[1, ])
as.vector(tobs[1, ])
as.vector(tobs[1, ]) - tout
vapply(tobs$t1, function(x) x - tout$t1)
vapply(tobs$t1, function(x) x - tout$t1, FUN.value = numeric(length(tobs$t1)))
vapply(tobs$t1, function(x) x - tout$t1, FUN.VALUE = numeric(length(tobs$t1)))
vapply(tobs$t1, function(x) x - tout$t1, FUN.VALUE = numeric(length(tout$t1)))
#Alternative to outer to deal with large memory allocation
test = vapply(tobs$t1,
function(x) x - tout$t1,
FUN.VALUE = numeric(length(tout$t1)))
dim(test)
#Alternative to outer to deal with large memory allocation
microbenchmark::microbenchmark(
vapply(tobs$t1,
function(x) x - tout$t1,
FUN.VALUE = numeric(length(tout$t1))),
times = 50
)
#Alternative to outer to deal with large memory allocation
test = epa_kernel(vapply(tobs$t1,
function(x) x - tout$t1,
FUN.VALUE = numeric(length(tout$t1))) / bw_vec[1]
) * epa_kernel(vapply(tobs$t2,
function(x) x - tout$t2,
FUN.VALUE = numeric(length(tout$t1))) / bw_vec[2]
)
test
dim(test)
dim(weights_num)
all.equal(t(test), weights_num)
seq_len(nrow(tout$t1))
nrow(tout$t1)
seq_len(length(tout$t1))
tobs$t1[1]
#Alternative to outer to deal with large memory allocation
test2 = vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1]) *
epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2])
)
#Alternative to outer to deal with large memory allocation
test2 = vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1]) *
epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
)
dim(test2)
dim(test)
all.equal(test, test2)
View(test2)
View(test)
tout$t1
tobs$t1[1]
tobs$t1[1] - tout$t1
tobs$t1[1] - tout$t1 / bw_vec[1]
epa_kernel(tobs$t1[1] - tout$t1 / bw_vec[1])
seq_along(tobs$t1)
length(tobs$t2)
length(tobs$t1)
dim(weights_num)
# Faster than outer
weights_num <- vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1])
* epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
)
dim(weights_num)
rm(test, test2)
gc()
dim(weights_num)
weights_denom <- rowSums(weights_num)
weights_denom
length(weights_denom)
dim(weights_num)
?sweep
weights <- sweep(weights_num,
MARGIN = 1,
STATS = weights_denom)
dim(weights)
# Faster than outer
weights_num <- vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1])
* epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
) |>
(\(x) sweep(x, MARGIN = 1, STATS = rowSums(x)))()
weights_num
dim(weights_num)
dim(weights)
all.equal(weights_num, weights)
# Faster than outer
weights <- vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1])
* epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
) |>
(\(x) t(sweep(x, MARGIN = 1, STATS = rowSums(x))))()
dim(weights)
length(c(Y_list[[1]]$X))
Y_smooth <- purrr::map(Y_list,
~matrix(crossprod(c(.x$X), weights),
nrow = length(xout),
ncol = length(xout)
)
)
Y_smooth[[1]]
Y_smooth[[1]] |> image()
Y_smooth[[10]] |> image()
Y_smooth[[21]] |> image()
?sweep
# Faster than outer
weights <- vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1])
* epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
) |>
(\(x) t(sweep(x, MARGIN = 1, STATS = rowSums(x), FUN = "/")))()
Y_smooth <- purrr::map(Y_list,
~matrix(crossprod(c(.x$X), weights),
nrow = length(xout),
ncol = length(xout)
)
)
image(Y_smooth[[10]])
View(weights)
image(Y_smooth[[21]])
image(Y_smooth[[1]])
test = vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1])
* epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
)
rowSums(test)
epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1])
epa_kernel(tobs$t1[1] - tout$t1 / bw_vec[1])
epa_kernel(tobs$t1[2] - tout$t1 / bw_vec[1])
epa_kernel(tobs$t1[50] - tout$t1 / bw_vec[1])
# Faster than outer
weights <- vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1])
* epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
) |>
(\(x) t(sweep(x, MARGIN = 1, STATS = rowSums(x), FUN = "/")))() |>
(\(x) replace(x, is.nan(x), 0))()
weights
Y_smooth <- purrr::map(Y_list,
~matrix(crossprod(c(.x$X), weights),
nrow = length(xout),
ncol = length(xout)
)
)
image(Y_smooth[[1]])
View(Y_smooth[[1]])
dim(Y_smooth[[1]])
dim(weights)
length(c(Y_list[[1]]$X))
test = vapply(seq_along(tobs$t1),
function(x) epa_kernel(tobs$t1[x] - tout$t1 / bw_vec[1])
* epa_kernel(tobs$t2[x] - tout$t2 / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
)
View(test)
bw_vec
# Faster than outer
weights <- vapply(seq_along(tobs$t1),
function(x) epa_kernel((tobs$t1[x] - tout$t1) / bw_vec[1])
* epa_kernel((tobs$t2[x] - tout$t2) / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
) |>
(\(x) t(sweep(x, MARGIN = 1, STATS = rowSums(x), FUN = "/")))() |>
(\(x) replace(x, is.nan(x), 0))()
View(weights)
Y_smooth <- purrr::map(Y_list,
~matrix(crossprod(c(.x$X), weights),
nrow = length(xout),
ncol = length(xout)
)
)
weights[[1]]
weights |> dim()
image(Y_smooth[[1]])
image(Y_smooth[[10]])
image(Y_list[[10]]$X)
rm(test)
rm(Test2)
rm(test2)
Y_test <- vapply(Y_list,
function(x) matrix(
crossprod(c(x$X, weights))
), nrow = length(xout), ncol = length(xout),
FUN.VALUE = numeric(length(xout)^2))
Y_test <- vapply(Y_list,
function(x) matrix(
crossprod(c(x$X, weights))
, nrow = length(xout), ncol = length(xout)
),
FUN.VALUE = numeric(length(xout)^2)
)
Y_test
rm(X_list)
rm(Y_list)
ksmooth_bi <- function(Y_list, bw_vec, xout) {
tobs <- expand.grid(t1 = Y_list[[1]]$t, t2 = Y_list[[1]]$t)
tout <- expand.grid(t1 = xout, t2 = xout)
# Faster than outer
weights <- vapply(seq_along(tobs$t1),
function(x) epa_kernel((tobs$t1[x] - tout$t1) / bw_vec[1])
* epa_kernel((tobs$t2[x] - tout$t2) / bw_vec[2]),
FUN.VALUE = numeric(length(tout$t1))
) |>
(\(x) t(sweep(x, MARGIN = 1, STATS = rowSums(x), FUN = "/")))() |>
(\(x) replace(x, is.nan(x), 0))()
purrr::map(Y_list,
~matrix(crossprod(c(.x$X), weights),
nrow = length(xout),
ncol = length(xout)
)
)
}
rm(bw_vec)
rm(xout)
test = ksmooth_bi(Y_list = Y_sum_learn, bw_vec = c(0.05, 0.07), xout = seq(0, 1, length.out = 121))
image(test[[26]])
Y_sum_learn[[26]]$X
image(Y_sum_learn[[26]]$X)
rm(weights, weights_num)
rm(tout, tobs)
rm(rot_mat)
rm(H_mat)
rm(Y_smooth)
test = ksmooth_bi(Y_list = Y_sum_learn, bw_vec = c(0.05, 0.07), xout = seq(0, 1, length.out = 121))
image(test[[26]])
image(test[[29]])
Y_sum_learn[[29]] |> image()
Y_sum_learn[[29]]$X |> image()
Y_sum_learn[[1]]$t
Y_sum_learn[[1]]$X
Y_sum_learn[[1]]$t
Y_sum_learn[[1]]X
Y_sum_learn[[1]]$X
Y_sum_learn[[1]]$t
Y_sum_learn[[1]]$X |> dim()
test = ksmooth_bi(Y_list = Y_sum_learn, bw_vec = c(0.05, 0.07), xout = seq(0, 1, length.out = 111))
par(mfrow = c(1, 2))
Y_sum_learn[[7]]$X |> image()
image(test[[7]])
Y_sum_learn[[9]]$X
devtools::document()
Y_list[[1]]
Y_sum_learn[[1]]$t
Y_sum_learn[[1]]$X
H1
H2
L1
L1 = 1
L2 = 1
sigma = 0.05
k
k = (3/(4*0.99))^2
k
M0
((k^2 * sigma^2) / (4 * L1 * H1))**(2*H1 + 1)
Lambda1_k2 <- (4 * L2 * H2) / (k^2 * sigma^2)
Lambda1_k1 <- ((k^2 * sigma^2) / (4 * L1 * H1))**(2*H1 + 1)
Lambda1 <- (Lambda1_k1 * Lambda1_k2)**(1 / (4*H1*H2 + 2*H1 + 2*H2))
Lambda1
Lambda1_k1 <- ((k^2 * sigma^2) / (4 * L1 * H1))**(2*H2 + 1)
Lambda1_k2 <- (4 * L2 * H2) / (k^2 * sigma^2)
Lambda1 <- (Lambda1_k1 * Lambda1_k2)**(1 / (4*H1*H2 + 2*H1 + 2*H2))
Lambda1
rate1 <- M0**(-H2 / (2*H2*H1 + H1 + H2))
rate1
M0
h1 <- Lambda1 * rate1
h1
Lambda1_k1 <- ((k^2 * sigma^2) / (4 * L1 * H1))**(2*H1 + 1)
Lambda1_k1 <- ((k^2 * sigma^2) / (4 * L1 * H1))**(2*H2 + 1)
Lambda1_k2 <- (4 * L2 * H2) / (k^2 * sigma^2)
Lambda1 <- (Lambda1_k1 * Lambda1_k2)**(1 / (4*H1*H2 + 2*H1 + 2*H2))
rate1 <- M0**(-H2 / (2*H2*H1 + H1 + H2))
h1 <- Lambda1 * rate1
h1
Lambda2_k1 <- ((k^2 * sigma^2) / (4 * L2 * H2))**(2*H1 + 1)
Lambda2_K1
Lambda2_k1
Lambda2_k2 <- (4 * L1 * H1) / (k^2 * sigma^2)
Lambda2_k2
Lambda2 <- (Lambda1_k1 * Lambda1_k2)**(1 / (4*H1*H2 + 2*H1 + 2*H2))
Lambda2
Lambda2 <- (Lambda2_k1 * Lambda2_k2)**(1 / (4*H1*H2 + 2*H1 + 2*H2))
Lambda2
rate2 <- M0**(-H1 / (2*H2*H1 + H1 + H2))
rate2
h2 <- Lambda2 * rate2
h2
h1
h2
c(h1 = h1, h2 = h2)
bw_smooth <- function(H1, H2, L1, L2, sigma, k, M0) {
Lambda1_k1 <- ((k^2 * sigma^2) / (4 * L1 * H1))**(2*H2 + 1)
Lambda1_k2 <- (4 * L2 * H2) / (k^2 * sigma^2)
Lambda1 <- (Lambda1_k1 * Lambda1_k2)**(1 / (4*H1*H2 + 2*H1 + 2*H2))
rate1 <- M0**(-H2 / (2*H2*H1 + H1 + H2))
h1 <- Lambda1 * rate1
Lambda2_k1 <- ((k^2 * sigma^2) / (4 * L2 * H2))**(2*H1 + 1)
Lambda2_k2 <- (4 * L1 * H1) / (k^2 * sigma^2)
Lambda2 <- (Lambda2_k1 * Lambda2_k2)**(1 / (4*H1*H2 + 2*H1 + 2*H2))
rate2 <- M0**(-H1 / (2*H2*H1 + H1 + H2))
h2 <- Lambda2 * rate2
c(h1 = h1, h2 = h2)
}
H1
H2
L1
L2
sigma
k
m0
M0
rm(H1, H2, L1, L2, sigma, k, M0)
bw_smooth(H1 = 0.8, H2 = 0.5, L1 = 1, L2 = 1, sigma = 0.05, k = 0.573921, M0 = 101)
bw_smooth(H1 = 0.8, H2 = 0.5, L1 = 1, L2 = 1, sigma = 0.05, k = 0.573921, M0 = 201)
bw_smooth(H1 = 0.8, H2 = 0.5, L1 = 1, L2 = 1, sigma = 0.05, k = 0.573921, M0 = 51)
Y_list
H1 = 0.8, H2 = 0.5, L1 = 1, L2 = 1, sigma = 0.05, k = 0.573921, M0 = 101
H1 = 0.8; H2 = 0.5; L1 = 1; L2 = 1; sigma = 0.05; k = 0.573921; M0 = 101
H1
H2
Y_list
Y_list = Y_sum_learn
Y_list
Y_list[[1]]$t
Y_list[[1]]$X
Y_list[[1]]$t
tout <- expand.grid(t1 = Y_list[[1]]$t, t2 = Y_list[[1]]$t)
tout
tout[1, ]
is.vector(tout[1, ])
as.matrix(tout)[1, ]
as.matrix(tout)[1, ] |> is.vector()
tout <- as.matrix(
expand.grid(t1 = Y_list[[1]]$t, t2 = Y_list[[1]]$t)
)
tout
rot_mat
rot_mat = matrix(c(cos(pi/3, -sin(pi/3), sin(pi/3), cos(pi/3))))
rot_mat = matrix(c(cos(pi/3, -sin(pi/3), sin(pi/3), cos(pi/3))), nrow = 2, ncol = 2)
rot_mat = matrix(c(cos(pi/3), -sin(pi/3), sin(pi/3), cos(pi/3))), nrow = 2, ncol = 2)
rot_mat = matrix(c(cos(pi/3), -sin(pi/3), sin(pi/3), cos(pi/3)), nrow = 2, ncol = 2)
rot_mat
tout[1, ]
t(tout[1, ])
apply(tout, 1, function(t) tcrossprod(rot_mat, t))
apply(tout, 1, function(t) crossprod(t(rot_mat), t))
test = apply(tout, 1, function(t) crossprod(t(rot_mat), t))
test
View(test)
View(test)
test <- apply(tout, 1, function(tm) crossprod(t(rot_mat), tm))
View(test)
test <- t(apply(tout, 1, function(tm) crossprod(t(rot_mat), tm)))
View(test)
rm(test)
Ralpha_t <- t(apply(tout, 1, function(tm) crossprod(t(rot_mat), tm)))
Ralpha_t
Y_list[[1]]$t
purrr::map(Y_list, ~list(t = Ralpha_t,
X = .x$X))
test = purrr::map(Y_list, ~list(t = Ralpha_t,
X = .x$X))
object.size(test)
object.size(test) / 1000
object.size(test) / 1000 / 1000
list(t = Ralpha_t,
X = purrr::map(Y_list, ~.x$X))
test = list(t = Ralpha_t,
X = purrr::map(Y_list, ~.x$X))
object.size(test)
object.size(test) / 1000
object.size(test) / 1000 / 1000
purrr::map(Y_list,
~list(t = Ralpha_t,
X = .x$X))
rm(test)
test = purrr::map(Y_list,
~list(t = Ralpha_t,
X = .x$X))
test[[1]]$t
Y_list[[1]]$t
purrr::map(Y_list,
~list(t = matrix(Ralpha_t,
nrow = length(Y_list[[1]]$t),
ncol = length(Y_list[[1]]$t)),
X = .x$X))
test = purrr::map(Y_list,
~list(t = matrix(Ralpha_t,
nrow = length(Y_list[[1]]$t),
ncol = length(Y_list[[1]]$t)),
X = .x$X))
test
test = purrr::map(Y_list,
~list(t = matrix(Ralpha_t,
nrow = length(Y_list[[1]]$t),
ncol = length(Y_list[[1]]$t)),
X = .x$X))
test[[1]]$t
image(test[[1]]$t)
image(test[[1]]$X)
View(test[[1]]$t)
test[[1]]$t[, 101]
test[[1]]$t[, 52]
test[[1]]$t[, 55]
test[[1]]$t[55, ]
test[[1]]$t[51, ]
Ralpha_t
length(Ralpha_t)
length(Y_list[[1]]$t)
View(Ralpha_t)
purrr::map(Y_list,
~list(t = Ralpha_t,
X = .x$X))
test = purrr::map(Y_list,
~list(t = Ralpha_t,
X = .x$X))
test
View(test)
test[[1]]$t
is.matrix(Ralpha_t)
rm(test)
tout[, 1]
devtools::document()
rm(list = c("epa_kernel", "ksmooth_bi", "L_sheets"))
devtools::document()
rm(list = c("bw_smooth"))
devtools::document()
