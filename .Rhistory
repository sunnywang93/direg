H2 = H2)
)
sheets_list <- purrr::map(X_list,
~list(t = xtrue,
X = .x))
# Estimate angle between basis vectors
alpha_list <- lapply(seq(0.01, 0.5, l = 20), function(x) {
estimate_angle(X_list = sheets_list,
xout = xparam,
delta = x)
})
alpha_mu <- purrr::map_dbl(alpha_list,
~mean(.x, na.rm = TRUE)
)
alpha_mu
pi/2
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = H1,
H2 = H2)
)
# X_can_list <- purrr::map(seq_len(N),
#                          ~fbm_prod(H1 = H1,
#                                    H2 = H2,
#                                    n = M,
#                                    endpoint = 1)
# )
#
# sheets_can_list <- purrr::map(X_can_list,
#                           ~list(t = xtrue,
#                                 X = .x))
sheets_list <- purrr::map(X_list,
~list(t = xtrue,
X = .x))
# Estimate angle between basis vectors
alpha_list <- lapply(seq(0.01, 0.5, l = 20), function(x) {
estimate_angle(X_list = sheets_list,
xout = xparam,
delta = x)
})
alpha_mu <- purrr::map_dbl(alpha_list,
~mean(.x, na.rm = TRUE)
)
alpha_mu
pi/6
library(direg)
library(foreach)
library(parallel)
library(tictoc)
library(snow)
library(ggplot2)
library(here)
# Parameter settings
N <- 200
M <- 51
H1 <- 0.8
H2 <- 0.5
delta <- 0.2
rout <- 20
xtrue <- seq(0, 1, length.out = M)
xparam <- seq(0, 1, length.out = 21)
# Set seeds to ensure reproducibility
set.seed(123)
seeds <- sample.int(10000,
size = rout)
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = H1,
H2 = H2)
)
# X_can_list <- purrr::map(seq_len(N),
#                          ~fbm_prod(H1 = H1,
#                                    H2 = H2,
#                                    n = M,
#                                    endpoint = 1)
# )
#
# sheets_can_list <- purrr::map(X_can_list,
#                           ~list(t = xtrue,
#                                 X = .x))
sheets_list <- purrr::map(X_list,
~list(t = xtrue,
X = .x))
# Estimate angle between basis vectors
alpha_list <- lapply(seq(0.01, 0.5, l = 20), function(x) {
estimate_angle(X_list = sheets_list,
xout = xparam,
delta = x)
})
alpha_mu <- purrr::map_dbl(alpha_list,
~mean(.x, na.rm = TRUE)
)
alpha_mu
pi/2 - pi/6
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 2,
H1 = H1,
H2 = H2)
)
# X_can_list <- purrr::map(seq_len(N),
#                          ~fbm_prod(H1 = H1,
#                                    H2 = H2,
#                                    n = M,
#                                    endpoint = 1)
# )
#
# sheets_can_list <- purrr::map(X_can_list,
#                           ~list(t = xtrue,
#                                 X = .x))
sheets_list <- purrr::map(X_list,
~list(t = xtrue,
X = .x))
# Estimate angle between basis vectors
alpha_list <- lapply(seq(0.01, 0.5, l = 20), function(x) {
estimate_angle(X_list = sheets_list,
xout = xparam,
delta = x)
})
alpha_mu <- purrr::map_dbl(alpha_list,
~mean(.x, na.rm = TRUE)
)
alpha_mu
?cotan
?acot
devtools::load_all()
estimate_angle
# Estimate angle between basis vectors
alpha_list <- lapply(seq(0.01, 0.5, l = 20), function(x) {
estimate_angle(X_list = sheets_list,
xout = xparam,
delta = x)
})
devtools::load_all()
# Estimate angle between basis vectors
alpha_list <- lapply(seq(0.01, 0.5, l = 20), function(x) {
estimate_angle(X_list = sheets_list,
xout = xparam,
delta = x)
})
alpha_mu <- purrr::map_dbl(alpha_list,
~mean(.x, na.rm = TRUE)
)
alpha_mu
devtools:load_all()
devtools::load_all()
fbm_sheet
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 2,
H1 = H1,
H2 = H2)
)
sheets_list <- purrr::map(X_list,
~list(t = xtrue,
X = .x))
# Estimate angle between basis vectors
alpha_list <- lapply(seq(0.01, 0.5, l = 20), function(x) {
estimate_angle(X_list = sheets_list,
xout = xparam,
delta = x)
})
alpha_mu <- purrr::map_dbl(alpha_list,
~mean(.x, na.rm = TRUE)
)
alpha_mu
pi/2
devtools::load_all()
tan(pi/2)
tan(pi/4)
tan(pi/6)
tan(pi/2)
tan(pi/3)
# Create a list of example vectors
vector_list <- lapply(seq_len(3), function(i) {
list(
x = seq(0, 1, l = 101),
y = fbm_fft(0.99, 101, 1)
)
})
M <- rpois(3, 50)
points_list <- lapply(M, function(x) {
sort(runif(x))
})
vector_rd <- purrr::map2(vector_list, points_list,
~list(
x = .y,
y = interp1(x = .x$x,
y = .x$y,
xi = .y,
method = "nearest") +
rnorm(length(.y), sd = 0.001)
)
)
library(pracma)
# Create a list of example vectors
vector_list <- lapply(seq_len(3), function(i) {
list(
x = seq(0, 1, l = 101),
y = fbm_fft(0.99, 101, 1)
)
})
M <- rpois(3, 50)
points_list <- lapply(M, function(x) {
sort(runif(x))
})
vector_rd <- purrr::map2(vector_list, points_list,
~list(
x = .y,
y = interp1(x = .x$x,
y = .x$y,
xi = .y,
method = "nearest") +
rnorm(length(.y), sd = 0.001)
)
)
# Convert the list to a data frame
df <- seq_along(vector_list) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_list[[idx]]$x, x = vector_list[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
df_rd <- seq_along(vector_rd) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_rd[[idx]]$x, x = vector_rd[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
# Create a line plot using ggplot2
df |>
ggplot(aes(x = time, y = x, color = obs)) +
geom_line() +
labs(x = "Time", y = "Value", title = "True Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
vector_list <- lapply(seq_len(5), function(i) {
list(
x = seq(0, 1, l = 101),
y = fbm_fft(0.99, 101, 1)
)
})
M <- rpois(3, 50)
points_list <- lapply(M, function(x) {
sort(runif(x))
})
vector_rd <- purrr::map2(vector_list, points_list,
~list(
x = .y,
y = interp1(x = .x$x,
y = .x$y,
xi = .y,
method = "nearest") +
rnorm(length(.y), sd = 0.001)
)
)
M <- rpois(5, 50)
points_list <- lapply(M, function(x) {
sort(runif(x))
})
vector_rd <- purrr::map2(vector_list, points_list,
~list(
x = .y,
y = interp1(x = .x$x,
y = .x$y,
xi = .y,
method = "nearest") +
rnorm(length(.y), sd = 0.001)
)
)
# Convert the list to a data frame
df <- seq_along(vector_list) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_list[[idx]]$x, x = vector_list[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
df_rd <- seq_along(vector_rd) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_rd[[idx]]$x, x = vector_rd[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
# Create a line plot using ggplot2
df |>
ggplot(aes(x = time, y = x, color = obs)) +
geom_line() +
labs(x = "Time", y = "Value", title = "True Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(NULL, aes(x = time, y = x, color = obs)) +
geom_point(data = df_rd) +
geom_line(data = df) +
labs(x = "Time", y = "Value", title = "Observed Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Create a line plot using ggplot2
df |>
ggplot(aes(x = time, y = x, color = obs)) +
geom_line() +
labs(x = "Time", y = "Value", title = "True Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
vector_list <- lapply(seq_len(5), function(i) {
list(
x = seq(0, 1, l = 101),
y = fbm_fft(0.99, 101, 1) + rnorm(1)
)
})
M <- rpois(5, 50)
points_list <- lapply(M, function(x) {
sort(runif(x))
})
vector_rd <- purrr::map2(vector_list, points_list,
~list(
x = .y,
y = interp1(x = .x$x,
y = .x$y,
xi = .y,
method = "nearest") +
rnorm(length(.y), sd = 0.001)
)
)
# Convert the list to a data frame
df <- seq_along(vector_list) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_list[[idx]]$x, x = vector_list[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
df_rd <- seq_along(vector_rd) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_rd[[idx]]$x, x = vector_rd[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
# Create a line plot using ggplot2
df |>
ggplot(aes(x = time, y = x, color = obs)) +
geom_line() +
labs(x = "Time", y = "Value", title = "True Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
vector_list <- lapply(seq_len(5), function(i) {
list(
x = seq(0, 1, l = 101),
y = fbm_fft(0.99, 101, 1) + rnorm(1, sd = 0.001)
)
})
M <- rpois(5, 50)
points_list <- lapply(M, function(x) {
sort(runif(x))
})
vector_rd <- purrr::map2(vector_list, points_list,
~list(
x = .y,
y = interp1(x = .x$x,
y = .x$y,
xi = .y,
method = "nearest") +
rnorm(length(.y), sd = 0.001)
)
)
# Convert the list to a data frame
df <- seq_along(vector_list) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_list[[idx]]$x, x = vector_list[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
df_rd <- seq_along(vector_rd) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_rd[[idx]]$x, x = vector_rd[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
# Create a line plot using ggplot2
df |>
ggplot(aes(x = time, y = x, color = obs)) +
geom_line() +
labs(x = "Time", y = "Value", title = "True Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
points(seq(0, 1, l = 201))
?rug
points(seq(0, 1, l = 101), rep(0, 101))
grid(seq(0, 1, l = 101))
# Create a line plot using ggplot2
df |>
ggplot(aes(x = time, y = x, color = obs)) +
geom_point() +
geom_line() +
labs(x = "Time", y = "Value", title = "True Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(NULL, aes(x = time, y = x, color = obs)) +
geom_point(data = df_rd) +
geom_line(data = df) +
labs(x = "Time", y = "Value", title = "Observed Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Create a list of example vectors
vector_list <- lapply(seq_len(5), function(i) {
list(
x = seq(0, 1, l = 101),
y = fbm_fft(0.8, 101, 1) + rnorm(1, sd = 0.001)
)
})
vector_list
points_list <- seq(0, 1, l = 101)
vector_rd <- purrr::map2(vector_list, points_list,
~list(
x = .y,
y = interp1(x = .x$x,
y = .x$y,
xi = .y,
method = "nearest") #+
# rnorm(length(.y), sd = 0.001)
)
)
points_list <- seq(0, 1, l = 101)
vector_rd <- purrr::map2(vector_list, points_list,
~list(
x = .y,
y = interp1(x = .x$x,
y = .x$y,
xi = .y,
method = "nearest") #+
# rnorm(length(.y), sd = 0.001)
)
)
vector_rd <- purrr::map(vector_list,
~list(
x = points_list,
y = interp1(x = .x$x,
y = .x$y,
xi = points_list,
method = "nearest") #+
# rnorm(length(.y), sd = 0.001)
)
)
df_rd <- seq_along(vector_rd) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_rd[[idx]]$x, x = vector_rd[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
ggplot(NULL, aes(x = time, y = x, color = obs)) +
geom_point(data = df_rd) +
geom_line(data = df) +
labs(x = "Time", y = "Value", title = "Observed Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(NULL, aes(x = time, y = x, color = obs)) +
geom_point(data = df_rd) +
labs(x = "Time", y = "Value", title = "Observed Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
vector_list
# Create a list of example vectors
vector_list <- lapply(seq_len(3), function(i) {
list(
x = seq(0, 1, l = 101),
y = fbm_fft(0.8, 101, 1) + rnorm(1, sd = 0.001)
)
})
vector_rd <- purrr::map(vector_list,
~list(
x = points_list,
y = interp1(x = .x$x,
y = .x$y,
xi = points_list,
method = "nearest") #+
# rnorm(length(.y), sd = 0.001)
)
)
df_rd <- seq_along(vector_rd) |>
lapply(function(idx) {
data.frame(obs = as.factor(idx), time = vector_rd[[idx]]$x, x = vector_rd[[idx]]$y)
}) |>
(\(x) do.call("rbind", x))()
ggplot(NULL, aes(x = time, y = x, color = obs)) +
geom_point(data = df_rd) +
labs(x = "Time", y = "Value", title = "Observed Trajectories") +
scale_color_discrete() +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
?install_github
devtools::install_github("sunnywang93/FDAdapt", ref = "main")
library(FDAdapt)
library(fda)
library(foreach)
library(fs)
library(doParallel)
library(functional)
library(purrr)
library(np)
estimate_parameters_FPCA(\)
estimate_parameters_FPCA
getwd()
