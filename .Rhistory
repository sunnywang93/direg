H2 = .4)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
alpha_sheet$alpha_tan |> mean()
fbm_sheet
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 4,
H1 = .9,
H2 = .4)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
alpha_sheet$alpha_tan |> mean()
pi/4
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 4,
H1 = .4,
H2 = .9)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
alpha_sheet$alpha_tan |> mean()
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 3,
H1 = .4,
H2 = .9)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
alpha_sheet$alpha_tan |> mean()
pi/3
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 3,
H1 = .9,
H2 = .4)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_tan |> mean()
alpha_sheet$alpha_cot |> mean()
H1
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = .8,
H2 = .5)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
alpha_sheet$alpha_tan |> mean()
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = .5,
H2 = .8)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_tan |> mean()
alpha_sheet$alpha_cot |> mean()
pi/6
fbm_sheet
args(fbm_sheet_var)
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha_fun = function(x) pi / 6,
H1 = .5,
H2 = .8)
)
X_list <- purrr::map(seq_len(N),
~fbm_sheet_var(
t_n = M,
e_n = M,
alpha_fun = function(x) pi / 6,
H1 = .5,
H2 = .8)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
alpha_sheet$alpha_tan |> mean()
X_list <- purrr::map(seq_len(N),
~fbm_sheet_var(
t_n = M,
e_n = M,
alpha_fun = function(x) pi / 6,
H1 = .8,
H2 = .5)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
fbm_sheet
devtools::load_all()
fbm_sheet
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = .5,
H2 = .8)
)
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = .8,
H2 = .5)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = .5,
H2 = .8)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
alpha_sheet$alpha_tan |> mean()
v1 <- c(cos(mean(alpha_sheet$alpha_cot)), sin(mean(alpha_sheet$alpha_cot)))
v2 <- c(cos(mean(alpha_sheet$alpha_tan)), sin(mean(alpha_sheet$alpha_tan)))
H_test1 <- H_sheets_dir(X_list = sheets_list,
tout = tout,
delta = 0.2,
base_list = list(v1, v2))
purrr::map_dbl(H_test1, ~mean(.x, na.rm = TRUE))
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = .8,
H2 = .5)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
v1 <- c(cos(mean(alpha_sheet$alpha_cot)), sin(mean(alpha_sheet$alpha_cot)))
v2 <- c(cos(mean(alpha_sheet$alpha_tan)), sin(mean(alpha_sheet$alpha_tan)))
H_test1 <- H_sheets_dir(X_list = sheets_list,
tout = tout,
delta = 0.2,
base_list = list(v1, v2))
purrr::map_dbl(H_test1, ~mean(.x, na.rm = TRUE))
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = .9,
H2 = .4)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot |> mean()
v1 <- c(cos(mean(alpha_sheet$alpha_cot)), sin(mean(alpha_sheet$alpha_cot)))
v2 <- c(cos(mean(alpha_sheet$alpha_tan)), sin(mean(alpha_sheet$alpha_tan)))
H_test1 <- H_sheets_dir(X_list = sheets_list,
tout = tout,
delta = 0.2,
base_list = list(v1, v2))
purrr::map_dbl(H_test1, ~mean(.x, na.rm = TRUE))
# Generate fractional brownian sheets
X_list <- purrr::map(seq_len(N),
~fbm_sheet(
t_n = M,
e_n = M,
alpha = pi / 6,
H1 = .4,
H2 = .9)
)
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
v1 <- c(cos(mean(alpha_sheet$alpha_cot)), sin(mean(alpha_sheet$alpha_cot)))
v2 <- c(cos(mean(alpha_sheet$alpha_tan)), sin(mean(alpha_sheet$alpha_tan)))
H_test1 <- H_sheets_dir(X_list = sheets_list,
tout = tout,
delta = 0.2,
base_list = list(v1, v2))
purrr::map_dbl(H_test1, ~mean(.x, na.rm = TRUE))
cos(pi/2)
t = expand.grid(t1 = seq(0, 1, length.out = M), t2 = seq(0, 1, length.out = M))
?switch
t
t = expand.grid(t1 = seq(0, 1, length.out = 51), t2 = seq(0, 1, length.out = 51))
t
tt = expand.grid(t1 = seq(0, 1, length.out = 51), t2 = seq(0, 1, length.out = 51))
t = tt[1, ]
t
t = tt[21, ]
t
t = tt[250, ]
t
t[, 2]
alpha_fun <- function(t) {
if(t[, 2] < 0.5) {
if(t[, 1] < 0.5) {
pi / 6
} else {
pi / 5
}
} else {
if(t[, 1] < 0.5) {
pi / 4
} else {
pi / 3
}
}
}
X_list <- purrr::map(seq_len(N),
~fbm_sheet_var(
t_n = M,
e_n = M,
alpha_fun = alpha_fun,
H1 = .8,
H2 = .5)
)
N <- 100
M <- 51
H1 <- 0.8
H2 <- 0.5
delta <- 0.2
rout <- 20
library(foreach)
library(parallel)
library(tictoc)
library(snow)
library(ggplot2)
library(here)
devtools::load_all()
X_list <- purrr::map(seq_len(N),
~fbm_sheet_var(
t_n = M,
e_n = M,
alpha_fun = alpha_fun,
H1 = .8,
H2 = .5)
)
fbm_sheet_var
t
tt
apply(tt, 1, alpha_fun)
tt[1, ]
alpha_fun
alpha_fun(tt[1, ])
alpha_fun(tt[2, ])
alpha_fun(tt[3, ])
alpha_fun(tt[100, ])
fbm_sheet_var
alpha_ex <- function(t) {
if(t[, 2] < 0.5) {
if(t[, 1] < 0.5) {
pi / 6
} else {
pi / 5
}
} else {
if(t[, 1] < 0.5) {
pi / 4
} else {
pi / 3
}
}
}
rm(alpha_fun)
X_list <- purrr::map(seq_len(N),
~fbm_sheet_var(
t_n = M,
e_n = M,
alpha_fun = alpha_fun,
H1 = .8,
H2 = .5)
)
X_list <- purrr::map(seq_len(N),
~fbm_sheet_var(
t_n = M,
e_n = M,
alpha_fun = alpha_ex,
H1 = .8,
H2 = .5)
)
t_n = M
e_n = M
alpha_fun = alpha_ex
H1 = .8
H2 = .5
# Specific coordinates of canonical bases
e1 <- c(1, 0)
e2 <- c(0, 1)
# Construct the evaluation points along the canonical bases
t1_tilde <- seq(0, 1, length.out = e_n)
t2_tilde <- seq(0, 1, length.out = e_n)
# Construct the 2D grid
tt <- expand.grid(t1 = t1_tilde, t2 = t2_tilde)
tt
# Construct alpha(t)
alpha_t <- apply(tt, 1, alpha_fun)
alpha_fun
tt[1, ]
tt[1, ][, 1]
tt[1, ][, 2]
tt[1, ]
alpha_fun(tt[1, ])
alpha_fun(tt[2, ])
tt
apply(tt, 1, alpha_fun)
alpha_fun
tt[1, ]
tt[1, ][, 1]
tt[1, ][, 2]
tt[, 2]
View(tt)
tt[21]
tt[21, ]
alpha_fun
tt[, 2]
apply(tt, 1, function(x) x)
apply(tt, 1, function(x) x) |> View()
tt
tt[1, ]
alpha_ex(tt[1, ])
alpha_ex(tt[101, ])
# Construct alpha(t)
alpha_t <- sapply(seq_len(nrow(tt)),
function(row) alpha_fun(tt[row, ]))
alpha_t
alpha_test <- apply(tt, 1, function(x) pi/4)
alpha_test
rm(alpha_test)
rm(alpha_t, e_n, t_n, H1, H2)
X_list <- purrr::map(seq_len(N),
~fbm_sheet_var(
t_n = M,
e_n = M,
alpha_fun = alpha_ex,
H1 = .8,
H2 = .5)
)
devtools::load_all()
X_list <- purrr::map(seq_len(N),
~fbm_sheet_var(
t_n = M,
e_n = M,
alpha_fun = alpha_ex,
H1 = .8,
H2 = .5)
)
X_list[[1]]
X_list[[1]] |> dim()
Reduce('+', purrr::map(X_list, ~.x^2)) / length(X_list)
image(Reduce('+', purrr::map(X_list, ~.x^2)) / length(X_list))
sheets_list <- purrr::map(X_list,
~list(t = seq(0, 1, length.out = M),
X = .x))
estimate_angle
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = 21),
delta = 0.2)
alpha_sheet$alpha_cot
alpha_sheet$alpha_cot |> image()
alpha_sheet$alpha_tan |> image()
View(alpha_sheet$alpha_cot)
seq(0, 1, length.out = 101)
seq(0, 1, length.out = 51)
View(tt)
tt$t1 < 0.5
View(alpha_sheet$alpha_cot)
which(seq(0, 1, l = 51) < 0.5)
xtrue <- seq(0, 1, length.out = M)
alpha_sub1 <- purrr::map(alpha_sheet,
~.x[which(xtrue < 0.5), which(xtrue < 0.5)])
which(xtrue < 0.5)
which(xtrue < 0.5)
alpha_sheet[[1]][which(xtrue < 0.5), which(xtrue < 0.5)]
alpha_sheet[[1]]
alpha_sheet <- estimate_angle(X_list = sheets_list,
xout = seq(0, 1, length.out = M),
delta = 0.2)
alpha_sheet
alpha_sub1 <- purrr::map(alpha_sheet,
~.x[which(xtrue < 0.5), which(xtrue < 0.5)])
image(alpha_sub1)
image(alpha_sub1$alpha_cot)
image(alpha_sub1$alpha_tan)
alpha_sub1 <- purrr::map(alpha_sheet,
~mean(.x[which(xtrue < 0.5), which(xtrue < 0.5)]
)
)
alpha_sub1
pi/6
alpha_ex
alpha_sub2 <- purrr::map(alpha_sheet,
~mean(.x[which(xtrue >= 0.5), which(xtrue < 0.5)]
)
)
alpha_sub2
pi/4
alpha_ex
pi/4
pi/5
alpha_sub2
alpha_sub3 <- purrr::map(alpha_sheet,
~mean(.x[which(xtrue < 0.5), which(xtrue >= 0.5)]
)
)
alpha_sub3
alpha_ex
pi/4
alpha_sub3
alpha_sub4 <- purrr::map(alpha_sheet,
~mean(.x[which(xtrue >= 0.5), which(xtrue >= 0.5)]
)
)
alpha_sub4
pi/3
